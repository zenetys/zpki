#!/bin/bash
#
# License: MIT License
# Author: Benoit DOLEZ <bdolez@zenetys.com>
# Copyright: 2020-2024
# Version: 1.0

# Filename usage to determine action
# zpki create-cnf
# zpki create-ca "CA-SUBJ"
# zpki create-key "SUBJ"
# zpki create-csr "SUBJ"
# zpki create-self "SUBJ"
# zpki ca-sign-csr "CSRFILE"
# zpki ca-create-crt "SUBJ"
# zpki ca-update-crt "CRTFILE"
# zpki ca-revoke-crt "CRTFILE"
# zpki ca-disable-crt "CRTFILE"
# zpki ca-display-crt "CRTFILE"
# zpki ca-dump-crt "CRTFILE"
# zpki ca-dump-csr "CSRFILE"
# zpki ca-dump-key "KEYFILE"
# zpki ca-dump-pkcs12 "KEYFILE"
# zpki ca-update-dump-crt "CRTFILE"
# zpki ca-update-db
# zpki ca-update-crl
# zpki ca-list

# Directory tree:
# zpki                  : ZPKI managed directory
# ca.crt                : CA Certificate
# ca.cnf                : Config for CA
# ca.key                : CA Private Key
# ca.idx                : Index of issued certificates
# ca.idx.attr           : Attributes of issued certificates
# ca.srl                : Serial number for issued certificates
# certs/SUBJ.crt        : SUBJ CommonName Certificate
# certs/SUBJ.csr        : SUBJ CommonName Certificate Signing Request
# certs.new/SERIAL.pem  : New certificates by serial number
# private/SUBJ.key      : SUBJ CommonName Private Key
# crl                   : Certificate Revocation List

NUMBITS=${ZPKI_NUMBITS:-4096}
NUMDAYS=${ZPKI_NUMDAYS:-366}
CIPHER=${ZPKI_CIPHER:-aes256}
DIGEST=${ZPKI_DIGEST:-sha256}

DEFAULT_CONFIG="
# Look at :
# https://www.openssl.org/docs/manmaster/man5/x509v3_config.html

[ ca ]
default_ca             = default_ca_section

[ default_ca_section ]
dir                    = .
certs                  = \$dir/certs
new_certs_dir          = \$dir/certs.new
crl_dir                = \$dir/crl
database               = \$dir/ca.idx
certificate            = \$dir/ca.crt
serial                 = \$dir/ca.srl
crlnumber              = \$dir/ca.crlnum
crl                    = \$dir/ca.crl
private_key            = \$dir/ca.key

copy_extensions        = copy

default_days           = ${NUMDAYS}
default_crl_days       = 30
default_md             = ${DIGEST}
preserve               = no
unique_subject         = no

policy                 = policy_match

[ policy_match ]
countryName             = optional
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


[ req ]
default_bits           = ${NUMBITS}
default_md             = ${DIGEST}
distinguished_name     = distinguished_name

[ x509 ]
x509_extensions        = server_ext

[ crl ]
authorityKeyIdentifier = keyid:always

[ distinguished_name ]
countryName            = Country Name
localityName           = Locality Name (e.g. city)
0.organizationName     = Organization Name (e.g. company)
organizationalUnitName = Organizational Unit Name (e.g. section)
commonName             = Common Name
emailAddress           = Email Address

[ ca_ext ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
keyUsage               = cRLSign, keyCertSign
# subjectAltName         = email:copy
# issuerAltName          = issuer:copy

[ server_ext ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:false
# nsCertType             = @nsCertType_section
# keyUsage               = @keyUsage_section
# extendedKeyUsage       = @extendedKeyUsage_section
# subjectAltName         = email:copy
# issuerAltName          = issuer:copy

[ user_ext ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:false
# nsCertType             = @nsCertType_section
# keyUsage               = @keyUsage_section
# extendedKeyUsage       = @extendedKeyUsage_section
# subjectAltName         = email:copy
# issuerAltName          = issuer:copy

[ nsCertType_section ]
# client            = true
# server            = true
# email             = true
# objsign           = true
# reserved          = true
# sslCA             = true
# emailCA           = true
# objCA             = true

[ keyUsage_section ]
# digitalSignature = true
# nonRepudiation   = true
# keyEncipherment  = true
# dataEncipherment = true
# keyAgreement     = true
# keyCertSign      = true
# cRLSign          = true
# encipherOnly     = true
# decipherOnly     = true

[ extentedKeyUsage_section ]
# serverAuth       = true    # SSL/TLS Web Server Authentication.
# clientAuth       = true    # SSL/TLS Web Client Authentication.
# codeSigning      = true    # Code signing.
# emailProtection  = true    # E-mail Protection (S/MIME).
# timeStamping     = true    # Trusted Timestamping
# OCSPSigning      = true    # OCSP Signing
# ipsecIKE         = true    # ipsec Internet Key Exchange
# msCodeInd        = true    # Microsoft Individual Code Signing (authenticode)
# msCodeCom        = true    # Microsoft Commercial Code Signing (authenticode)
# msCTLSign        = true    # Microsoft Trust List Signing
# msEFS            = true    # Microsoft Encrypted File System
"

if tty -s >/dev/null 2>&1; then
    declare -A C=(
        [info]=$'\x1b[1m'
        [warn]=$'\x1b[7;33m'
        [error]=$'\x1b[7;91m'
        [fatal]=$'\x1b[7;1;91m'
        [blue]=$'\x1b[7;34m'
        [reset]=$'\x1b[m'
    )
    HAS_TTY=1
else
    declare -A C=()
    HAS_TTY=
fi

function info() {
    local i;
    local l=info
    [[ ${1:0:2} == -- ]] && l=${1:2} && shift
    for i in "$@"; do
        printf '%s: %s\n' "${C[$l]}${l^^}${C[reset]}" "$i";
    done
}

function fatal() {
    local usage=0
    [[ $1 == --usage ]] && usage=1 && shift
    info --${FUNCNAME[0]} "$@"
    (( $usage )) && usage
    exit 2
}

function error() {
    info --${FUNCNAME[0]} "$@"
}

function warn() {
    info --${FUNCNAME[0]} "$@"
}

function debug() {
    (( DEBUG == 0 )) && return 0
    info --${FUNCNAME[0]} "$@"
}

function yesno() {
  local QUESTION="$1" ; shift
  [[ $YES == 1 ]] && return 0
  [[ $HAS_TTY == 1 ]] || fatal "Need YES=1 or stdin, abort"
  while : ; do
    echo -n "$QUESTION (y/n): " && read
    (( $? == 0 )) || fatal "Read on stdin failed, abort"
    case $REPLY in
      [Yy]|[Yy][Ee]|[Yy][Ee][Ss]) return 0 ;;
      [Nn]|[Nn][Oo]) return 1 ;;
      *) echo "Bad answer, try again" ;;
    esac
  done
  return 0
}

function echo_quoted() {
  local s=$1 ; shift

  echo -n "${PREFIX:+$PREFIX }"
  # A..Z a..z 0..9 + - , . / =
  [[ $s && -z ${s//[A-Za-z+-9=_]} ]] && echo -n "$s" || echo -n " '${s}'"
  for s in "$@"; do
    [[ $s && -z ${s//[A-Za-z+-9=_]} ]] && echo -n " $s" || echo -n " '${s}'"
  done
  echo
}

function openssl() {
  command "${ZPKI_OPENSSL_CMD:-openssl}" "$@";
}

function openssl_debug() {
  local IFS=$'\n'
  (( VERBOSE >= 1 )) && PREFIX=": openssl" echo_quoted "$@" >&2
  if [[ -n $RAW ]]; then
    openssl "$@"
  else
    ERRMSG=( $(openssl "$@" 2>&1) )
  fi
  return $?
}

function is-exists() {
  local FORCE
  [[ ${1:0:1} == - ]] && FORCE=${1:1} && shift
  if [[ -s $1 && ! ${FORCE} ]] ; then
    (( VERBOSE >= 1 )) && echo "$1: already exists, bypass" >&2
    return 0
  fi
  return 1
}

function is-error() {
  local ERR=$?
  [[ ${1:0:1} == - ]] && ERR=${1:1} && shift
  [[ $ERR == 0 ]] && return 0
  echo -n "ERROR: $1" >&2
  echo "${ERRMSG[*]/#/$'\n'> }" >&2
  return $ERR
}

#X-ACTION create-cnf: Generate a default OpenSSL configuration file
function create-cnf() {
  local CNFFILE=${1:-$CNFFILE}
  [[ $FORCE ]] && FORCE_CREATE_CNF=1 && unset FORCE
  is-exists -$FORCE_CREATE_CNF "$CNFFILE" && return 0
  yesno "Create config '$CNFFILE' ?" || return
  touch "$CNFFILE"
  is-error "Cannot create config '$CNFFILE'" || return
  echo "$DEFAULT_CONFIG" >> $CNFFILE
  return 0
}

function password-ready() {
  if [[ -n $CIPHER && -z $ZPKI_PASSWORD && $HAS_TTY == 0 ]]; then
    fatal "Need password or stdin with cipher enabled"
  fi
}

#X-ACTION create-key [CN|SUBJ]: Create a key file
function create-key() {
  local KEYFILE=${1:-$KEYFILE}
  [[ $SUBJECT ]] || fatal "Cannot create a private key file with empty subject"
  [[ $FORCE ]] && FORCE_CREATE_KEY=1 && unset FORCE
  is-exists -$FORCE_CREATE_KEY "$KEYFILE" && return 0
  yesno "Create key '$KEYFILE' ?" || return

  password-ready || return

  PARAMS=(
    -out "$KEYFILE"
    ${CIPHER:+-$CIPHER}
    ${ZPKI_PASSWORD:+-passout env:ZPKI_PASSWORD}
    $NUMBITS
  )
  $OPENSSL genrsa "${PARAMS[@]}"
  is-error "Cannot create key '$KEYFILE'" || return
}


#X-ACTION create-csr [CN|SUBJ] <ALTNAMES>: Generate a certificate signing request (CSR) file
function create-csr() {
  local CSRFILE=${1:-$CSRFILE}
  [[ $SUBJECT ]] || fatal "Cannot generate a certificate signing request with empty subject"
  [[ $FORCE ]] && FORCE_CREATE_CSR=1 && unset FORCE
  is-exists -$FORCE_CREATE_CSR "$CSRFILE" && return 0
  yesno "Create certificate request '$CSRFILE' ?" || return
  create-key "$KEYFILE" || return

  password-ready || return

  PARAMS=(
    -batch
    -new
    ${UTF8:+-utf8}
    -out "$CSRFILE"
    -key "$KEYFILE"
    ${SUBJECT:+-subj "$SUBJECT"}
    ${SUBJALT:+-addext "subjectAltName=$SUBJALT"}
    ${ZPKI_PASSWORD:+-passin env:ZPKI_PASSWORD}
  )
  $OPENSSL req "${PARAMS[@]}"
  is-error "Cannot create certificate request '$CSRFILE'" || return
}

#X-ACTION create-self [CN|SUBJ] <ALTNAMES>: Create a self-signed certificate
function create-self() {
  local CRTFILE=${1:-$CRTFILE}
  [[ $SUBJECT ]] || fatal "Cannot create self-signed certificate with empty subject"
  [[ $FORCE ]] && FORCE_CREATE_CRT=1 && unset FORCE
  is-exists -$FORCE_CREATE_CRT $CRTFILE && return 0
  yesno "Create self-signed certificate '$SUBJECT' ($CRTFILE) ?" || return
  create-cnf "$CNFFILE" || return
  create-key "$KEYFILE" || return

  password-ready || return

  PARAMS=(
    -batch
    -new -x509
    -days "$NUMDAYS"
    ${ZPKI_START_DATE:+-startdate "$ZPKI_START_DATE"}
    ${ZPKI_END_DATE:+-enddate "$ZPKI_END_DATE"}
    ${UTF8:+-utf8}
    -out "$CRTFILE"
    -key "$KEYFILE"
    ${SUBJECT:+-subj "$SUBJECT"}
    ${SUBJALT:+-addext "subjectAltName=$SUBJALT"}
    -config "$CNFFILE" -extensions ${ZPKI_EXT:-server_ext}
    ${ZPKI_PASSWORD:+-passin env:ZPKI_PASSWORD}
  )
  $OPENSSL req "${PARAMS[@]}"
  is-error "Cannot create auto-signed '$CRTFILE'" || return
}

#X-ACTION create-ca [CN|SUBJ]: Create a Certificate Authority (CA) and its storage
function create-ca() {
  local CNFFILE=$CA_CNFFILE
  local KEYFILE=$CA_KEYFILE
  local CRTFILE=$CA_CRTFILE
  local SUBJALT # empty
  local FORCE_CREATE_CRT # empty
  local SERIAL=$RANDOM$RANDOM$RANDOM
  
  [[ $SUBJECT ]] || fatal "Cannot create CA with empty subject"
  create-cnf  "$CNFFILE" || return
  ZPKI_PASSWORD=$ZPKI_CA_PASSWORD create-key "$KEYFILE" || return
  ZPKI_PASSWORD=$ZPKI_CA_PASSWORD ZPKI_EXT="ca_ext" create-self "$CRTFILE" || return
  [[ -d certs ]]      || mkdir certs
  [[ -d certs.new ]]  || mkdir certs.new
  [[ -d crl ]]        || mkdir crl
  [[ -d private ]]    || mkdir private
  [[ -e ca.idx ]]     || touch ca.idx
  [[ -e ca.idz ]]     || touch ca.idz
  [[ -s ca.srl ]]     || printf "%016X\n" $SERIAL > ca.srl
  [[ -s ca.crlnum ]]  || echo 01 > ca.crlnum
  ca-update-crl || return
  return 0
}

function create-cert() {
  ca-create-crt "$@"
}

function create-crt() {
  ca-create-crt "$@"
}

#X-ACTION ca-create-crt [CN|SUBJ] <ALTNAMES>: Create a certificate
function ca-create-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ $SUBJECT ]] || fatal "Cannot create certificate with empty subject"
  [[ $FORCE ]] && FORCE_CREATE_CRT=1 && unset FORCE
  is-exists -$FORCE_CREATE_CRT "$CRTFILE" && return 1
  yesno "Create certificate '$SUBJECT' ($CRTFILE) ?" || return
  create-csr "$CSRFILE" || return

  ZPKI_PASSWORD=$ZPKI_CA_PASSWORD password-ready || return

  PARAMS=(
    -config "$CA_CNFFILE"
    -batch
    -in  "$CSRFILE"
    -out "$CRTFILE"
    -days "$NUMDAYS"
    ${ZPKI_START_DATE:+-startdate "$ZPKI_START_DATE"}
    ${ZPKI_END_DATE:+-enddate "$ZPKI_END_DATE"}
    -extensions ${ZPKI_EXT:-server_ext}
    ${ZPKI_CA_PASSWORD:+-passin env:ZPKI_CA_PASSWORD}
  )
  $OPENSSL ca "${PARAMS[@]}"
  is-error "Cannot sign request '$CSRFILE' to '$CRTFILE'" || return
  ca-update-db "$CRTFILE"
}

#X-ACTION ca-update-crl: Generate the CRL
function ca-update-crl() {
  local PARAMS=(
    -gencrl
    -config "$CA_CNFFILE"
    -out "$CA_CRLFILE"
    -batch
    ${ZPKI_CA_PASSWORD:+-passin env:ZPKI_CA_PASSWORD}
  )
  $OPENSSL ca "${PARAMS[@]}"
  is-error "Cannot generate CRL" || return
}

#X-ACTION ca-update-db: Reload all certificates in the ca.idz file
function ca-update-db() {
  local CRTFILE=$1; shift
  local serial keyfile
  PARAMS=(
    -updatedb
    -config "$CA_CNFFILE"
    -batch
    ${ZPKI_CA_PASSWORD:+-passin env:ZPKI_CA_PASSWORD}
  )
  $OPENSSL ca "${PARAMS[@]}"
  is-error "Cannot update database" || return

  local IFS=$'\n'
  if [[ -n $CRTFILE ]]; then
    echo "$CRTFILE"
  else
    find certs -maxdepth 1 -type f -name "*.crt"
  fi |while read -r; do
    serial=$(openssl x509 -in $REPLY -noout -serial) || continue
    serial=${serial#*=}
    keyfile=${REPLY%.crt}.key
    keyfile=${keyfile##*/}
    if [[ ! -e private/$serial.key && -e "private/$keyfile" ]]; then
      ln -s $keyfile private/$serial.key
    fi
  done

  if [[ -n $CRTFILE ]]; then
    cp -a ca.idz ca.idz.new
    echo "$CRTFILE"
  else
    > ca.idz.new
    find certs.new -maxdepth 1 -type f -name "*.pem" |
      sed -re 's,/,/0x,' |sort -t / -k 2g |sed -re 's,/0x,/,'
  fi |while read -r; do
    ca-update-dump-crt "$REPLY"
  done >> ca.idz.new
  echo "Updated ca.idz file"
  mv -f ca.idz.new ca.idz
}

#X-ACTION ca-list: List certificates stored in the CA
function ca-list() {
  local CA_IDXFILE=ca.idx
  local CA_IDZFILE=ca.idz

  [[ ! -s $CA_IDXFILE || ! -s $CA_IDZFILE ]] && { fatal "No certficate found"; return; }

  cat $CA_IDXFILE |
    while read -r ; do echo -e "$REPLY"; done |
    TZ=UTC gawk -v "FORMAT_$FORMAT=1" -v IDZFILE=ca.idz '
  BEGIN {
    FS="\t";

    while ((getline < IDZFILE) == 1) {
      serial[$1]=$1;
      hash[$1]=$2;
      notBefore[$1]=$3;
      notAfter[$1]=$4;
      subject[$1]=$5;
      issuer[$1]=$6;
      email[$1]=$7;
      keyStatus[$1]=$8;
      type[$1]=$9;
    }
    if (FORMAT_JSON) {
      printf("[");
    }
    else {
      printf("%s\t", "status");
      printf("%s\t", "notBefore");
      printf("%s\t", "notAfter");
      printf("%s\t", "revocationDate");
      printf("%s\t", "serial");
      printf("%s\t", "cn");
      printf("%s\t", "subject");
      printf("%s\t", "issuer");
      printf("%s\t", "email");
      printf("%s\t", "hash");
      printf("%s\t", "keyStatus");
      printf("%s\n", "type");
      # printf("%s\t", "filename");
    }
  }
  function rfc3339(date) {
    if (!date) return;
    if (length(date) < 15) date = "20" date;
    return substr(date, 1, 4)"-"substr(date, 5, 2)"-"substr(date, 7, 2)"T" \
        substr(date, 9, 2)":"substr(date, 11, 2)":"substr(date, 13);
  }
  function cn(dn, a) {
    if (match(dn, /CN=([^/]*)/, a)) {
      return a[1];
    }
  }
  function isExpired(expirationDate) {
    currentTime = strftime("%Y-%m-%dT%H:%M:%SZ");
    return (expirationDate < currentTime);
  }
  function escapeQB(el) {
    return gensub(/["\\]/, "\\\\\\0", "g", el);
  }

  function entry_json() {
    printf("%s\n {",((NR==1)?"":","));
    printf("\"status\":\"%s\"", escapeQB(status));
    printf(",\"expiration\":\"%s\"", escapeQB(rfc3339($2)));
    if ($3) printf(",\"revocation\":\"%s\"", escapeQB(rfc3339($3)));
    printf(",\"serial\":\"%s\"", escapeQB($4));
    printf(",\"id\":\"%s\"", escapeQB(cn($6)));
    if (hash[$4]) printf(",\"hash\":\"%s\"", escapeQB(hash[$4]));
    if (issuer[$4]) printf(",\"issuer\":\"%s\"", escapeQB(issuer[$4]));
    if (email[$4]) printf(",\"email\":\"%s\"", escapeQB(email[$4]));
    printf(",\"cn\":\"%s\"", escapeQB(cn($6)));
    printf(",\"subject\":\"%s\"", escapeQB($6));
    if (notBefore[$4]) printf(",\"startDate\":\"%s\"", escapeQB(notBefore[$4]));
    printf(",\"endDate\":\"%s\"", escapeQB(rfc3339($2)));
    printf(",\"keyStatus\":\"%s\"", escapeQB(keyStatus[$4]));
    if (type[$4]) printf(",\"type\":\"%s\"", escapeQB(type[$4]));
    # printf(",\"filename\":\"%s\"", escapeQB($5));
    printf("}");
  }
  function entry_tsv() {
    printf("%s\t", status);
    printf("%s\t", notBefore[$4]);
    printf("%s\t", rfc3339($2));
    printf("%s\t", rfc3339($3));
    printf("%s\t", $4);
    printf("%s\t", cn($6));
    printf("%s\t", $6);
    printf("%s\t", issuer[$4]);
    printf("%s\t", email[$4]);
    printf("%s\t", hash[$4]);
    printf("%s\t", keyStatus[$4]);
    printf("%s\n", type[$4]);
    # printf("%s\t", "filename");
  }
  {
    status = ($1 == "V" && isExpired(rfc3339($2)) ? "E" : $1);
    if (FORMAT_JSON)
      entry_json();
    else
      entry_tsv();
  }
  END {
    if (FORMAT_JSON) printf("\n]\n");
  }
  '
}

#X-ACTION ca-sign-csr [CN|SUBJ|CSRFILE]: Sign a CSR file using the CA
function ca-sign-csr() {
  local CSRFILE=${1:-$CSRFILE}
  local CRTFILE=${CRTFILE:-${CSRFILE%.csr}.crt}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument" && return
  SUBJECT=$(openssl req -in $CSRFILE -subject -noout)
  [[ ${SUBJECT:0:8} == "subject=" ]] && SUBJECT=${SUBJECT:8} ||
    fatal "Cannot get subject in CSR '$CSRFILE'"
  SUBJECT=/${SUBJECT//, /\/}
  SUBJECT=${SUBJECT// = /=}
  COMMON_NAME=${SUBJECT##*/CN=}
  COMMON_NAME=${COMMON_NAME%%,*}
  create-crt "$CRTFILE"
}

#X-ACTION ca-update-crt [CN|SUBJ|CRTFILE]: Update a certificate
function ca-update-crt() {
  local CRTFILE=${1:-$CRTFILE}
  local CSRFILE=${CSRFILE:-${CRTFILE%.crt}.csr}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument" && return
  SUBJECT=$(openssl req -in "$CSRFILE" -subject -noout)
  [[ ${SUBJECT:0:8} == "subject=" ]] && SUBJECT=${SUBJECT:8} ||
    fatal "Cannot get subject in CSR '$CSRFILE'"
  yesno "Are you sure to update (revoke/sign) '$SUBJECT'" || return
  YES=1 ca-revoke-crt "$CRTFILE"
  YES=1 FORCE_CREATE_CRT=1 ca-sign-csr "$CSRFILE"
  return 0
}

#X-ACTION ca-revoke-crt [CN|SUBJ|CRTFILE]: Revoke a certificate
function ca-revoke-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument" && return
  SUBJECT=$(openssl x509 -in $CRTFILE -subject -noout)
  [[ ${SUBJECT:0:8} == "subject=" ]] && SUBJECT=${SUBJECT:8} ||
    fatal "Cannot get subject in CRT '$CRTFILE'"
  SUBJECT=/${SUBJECT//, /\/}
  SUBJECT=${SUBJECT// = /=}
  COMMON_NAME=${SUBJECT##*/CN=}
  COMMON_NAME=${COMMON_NAME%%,*}
  yesno "Revoke certificate '$SUBJECT' ($CRTFILE)" || return

  PARAMS=(
    -config "$CA_CNFFILE"
    -batch
    -revoke "$CRTFILE"
    ${ZPKI_CA_PASSWORD:+-passin env:ZPKI_CA_PASSWORD}
  )
  $OPENSSL ca "${PARAMS[@]}"
  is-error "Cannot revoke certificate '$SUBJECT'" || return
  ca-update-crl || return
}

#X-ACTION ca-disable-crt [CN|SUBJ|CRTFILE]: Definitly disable a certificate
function ca-disable-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument" && return
  SUBJECT=$(openssl x509 -in $CRTFILE -subject -noout)
  [[ ${SUBJECT:0:8} == "subject=" ]] && SUBJECT=${SUBJECT:8} ||
    fatal "Cannot get subject in CRT '$CRTFILE'"
  SUBJECT=/${SUBJECT//, /\/}
  SUBJECT=${SUBJECT// = /=}
  COMMON_NAME=${SUBJECT##*/CN=}
  COMMON_NAME=${COMMON_NAME%%,*}
  SERIAL=$(openssl x509 -in "$CRTFILE" -noout -serial)
  SERIAL=${SERIAL#serial=}
  yesno "Disable certificate (couldn't be restored) '$SUBJECT' ($CRTFILE)" || return

  ZPKI_PASSWORD=$ZPKI_CA_PASSWORD password-ready || return

  if grep -q -E "^D(\s\w+\s\w+\s$SERIAL\s)" ca.idx; then
    info "'$SUBJECT' already disabled"
  elif ! grep -q -E "^R(\s\w+\s\w+\s$SERIAL\s)" ca.idx; then 
    PARAMS=(
      -config "$CA_CNFFILE"
      -batch
      -revoke "$CRTFILE"
      ${ZPKI_CA_PASSWORD:+-passin env:ZPKI_CA_PASSWORD}
    )
    $OPENSSL ca "${PARAMS[@]}"
    is-error "Cannot revoke certificate '$SUBJECT'" || return
    ca-update-crl || return
  fi
  chmod -w "$CRTFILE"
  sed -i -re "s/^R(\s\w+\s\w+\s$SERIAL\s)/D\1/" ca.idx || return
  info "'$SUBJECT' disabled"
}

function x509-to-json() {
  gawk '
  function parseLine(line) {
    if (match(line, "^(\\s*)([^:]+):\\s*$", a)) {
      start = a[1] "    "; # add four spaces
      attr = a[2];
      value = ""
    }
    else if (match(line, "^(\\s*)([^:]+): (.+)", a)) {
      printf("%s", SEP); SEP=",\n";
      printf("  \"%s\": \"%s\"", a[2], a[3]);
    }
    else if (substr(line, 1, length(start)) == start &&
             match(substr(line, length(start)+1),
                   "^([0-9a-fA-F][0-9a-fA-F])(:[0-9a-fA-F][0-9a-fA-F])*(:)?$")) {
      value = value substr(line, length(start)+1);
      if (substr(line, length(line)) != ":") {
        printf("%s", SEP); SEP=",\n";
        printf("  \"%s\": \"%s\"", attr, value);
        attr = "";
      }
    }
    else if (attr && substr(line, 1, length(start)) == start) {
        value = value substr(line, length(start)+1);
        printf("%s", SEP); SEP=",\n";
        printf("  \"%s\": \"%s\"", attr, value);
        attr = "";
    }
  }
  BEGIN {
    printf("{\n");
  }
  {
    parseLine($0);
  }
  END {
    printf("\n}\n");
  }
  '
}

#X-ACTION ca-display-crt [CRTFILE]: Display an entire certificate file (.crt)
function ca-display-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument" && return
  [[ -e $CRTFILE ]] || fatal "Cannot get $CRTFILE"
  if [[ $FORMAT == JSON ]]; then
    openssl x509 -noout -text -in $CRTFILE | x509-to-json
  else
    openssl x509 -noout -text -in $CRTFILE
  fi
}

#X-ACTION ca-update-dump-crt [CRTFILE]: Update and dump the content of a certificate file (.crt) file
function ca-update-dump-crt() {
  local CRTFILE=${1:-$CRTFILE}; shift
  local KEYFILE=${1:-$KEYFILE}; shift
  local IFS=$'\n'
  local A keyStatus
  [[ -z $CRTFILE ]] && fatal "Function needs an argument" && return
  [[ -e $CRTFILE ]] || fatal "Cannot get $CRTFILE"
  [[ -z $KEYFILE ]] && {
    KEYFILE=${CRTFILE%.*}.key
    KEYFILE=private/${KEYFILE##*/}
  }
  # hash and email do not have <key>= in output
  # force subject/issuer oneline output as default format varies in openssl versions
  for A in $(openssl x509 -in "$CRTFILE" -noout -hash -serial -email \
        -startdate -enddate -subject -issuer -nameopt oneline |
        sed -re '1s,^,hash=,;t; 3{/=/!s,^,email=,;t}; /^[^=]+=/!s,^,skip=,;t' \
            -e '/^(subject|issuer)=/{s!((^[^=]+=) ?|, )([^=]+) = !\2/\3=!g}'); do
    declare "x509_$A"
  done
  if [[ ! -e $KEYFILE ]]; then
    keyStatus="missing"
  elif [[ ! -s $KEYFILE ]]; then
    keyStatus="empty"
  elif grep -qE -- "-----BEGIN ENCRYPTED PRIVATE KEY-----|Proc-Type: 4,ENCRYPTED" "$KEYFILE"; then
    keyStatus="encrypted"
  else
    keyStatus="plain"
  fi
  printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$x509_serial" "$x509_hash" \
      "$(date -ud "$x509_notBefore" +%Y-%m-%dT%H:%M:%SZ)" \
      "$(date -ud "$x509_notAfter" +%Y-%m-%dT%H:%M:%SZ)" \
      "$x509_subject" "$x509_issuer" "$x509_email" "$keyStatus" "$ZPKI_EXT"
}

#X-ACTION ca-dump-crt [CRTFILE]: Dump the content of a certificate (.crt) file
function ca-dump-crt() {
  local CRTFILE=${1:-$CRTFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument: CRTFILE" && return
  [[ -e $CRTFILE ]] || fatal "Cannot get $CRTFILE"
  gawk '{if (substr($0, 1, 1) == "-") dump=1; if (dump) print $0;}' < $CRTFILE
}

#X-ACTION ca-dump-csr [CSRFILE]: Dump the content of a certificate signing request (.csr) file
function ca-dump-csr() {
  local CSRFILE=${1:-$CSRFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument: CSRFILE" && return
  [[ -e $CSRFILE ]] || fatal "Cannot get $CSRFILE"
  gawk '{if (substr($0, 1, 1) == "-") dump=1; if (dump) print $0;}' < $CSRFILE
}

#X-ACTION ca-dump-key [KEYFILE]: Dump the content of a private key (.key) file
function ca-dump-key() {
  local KEYFILE=${1:-$KEYFILE}
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument: KEYFILE" && return
  [[ -e $KEYFILE ]] || fatal "Cannot get $KEYFILE"
  gawk '{if (substr($0, 1, 1) == "-") dump=1; if (dump) print $0;}' < $KEYFILE
}

#X-ACTION ca-dump-pkcs12 [KEYFILE]: Dump the content of certificate in the pkcs12 format
function ca-dump-pkcs12() {
  local args
  [[ -z ${ARGS[0]} ]] && fatal "Function needs an argument : FILE" && return

  ZPKI_PASSWORD=$ZPKI_EXPORT_PASSWORD password-ready || return

  [[ -e $KEYFILE ]] || fatal "Cannot get $KEYFILE"
  [[ -e $CRTFILE ]] || fatal "Cannot get $CRTFILE"
  args=(
    -export
    -in "$CRTFILE"
    -inkey "$KEYFILE"
    ${ZPKI_PASSWORD:+-passin "env:ZPKI_PASSWORD"}
    -certfile "$CA_CRTFILE"
    -passout "env:ZPKI_EXPORT_PASSWORD"
  )
  RAW=1 $OPENSSL pkcs12 "${args[@]}"
}

#X-ACTION ca-test-password: Test if CA passphrase is correct
function ca-test-password() {
  [[ -r $CA_KEYFILE ]] || { echo 'ERROR: Cannot read key' >&2; return 2; }
  awk '
    # status 0: encrypted, status 1: plain
    /^-----BEGIN / { if (/ENCRYPTED/) { exit 0 }; inside = NR }
    inside && NR == inside + 1 && /^Proc-Type: / && /ENCRYPTED/ { exit 0; }
    inside && /^-----END / { inside = 0; exit 1; }
  ' "$CA_KEYFILE"
  local check_enc=$?
  [[ $check_enc == 0 && -z $ZPKI_CA_PASSWORD ]] && { echo 'ERROR: Bad password' >&2; return 1; }
  [[ $check_enc == 1 && -n $ZPKI_CA_PASSWORD ]] && { echo 'ERROR: Bad password' >&2; return 1; }
  # make sure the passin env variable is exported
  ZPKI_CA_PASSWORD="$ZPKI_CA_PASSWORD" \
    $OPENSSL rsa -in "$CA_KEYFILE" -noout -passin env:ZPKI_CA_PASSWORD
  is-error 'Bad password' || return 1
}

function usage() {
  local IFS=$'\t'
  exec >&2
  if [[ $0 == "-bash" ]] ; then return 1 ; fi
  [[ $# -gt 0 ]] && echo "ERROR: $*"
  version
  echo "Usage: ${0##*/} [options] ACTION [ACTION-PARAMETERS]"
  echo "Options:"
  sed -nr "s/^[[:space:]]*## ([^:]*): /\1\t/p" -- "$0" |
    while read OPT DESC ; do
      printf " %-23s %s\n" "$OPT" "$DESC"
    done
  echo
  echo "<ACTION> is one of:"
  sed -nr "s/^#X-ACTION ([^:]*): /\1\t/p" -- "$0" |
    while read OPT DESC ; do
      printf " %s\n     \342\224\224\342\224\200 %s\n" "$OPT" "$DESC"
    done
  echo
  echo "For Subject Alternative Names (SANs), add address type: DNS:<FQDN>, IP:ADDR"
  return 0
}

function version() {
  local PROGFILE=$0
  local VERSION=$(sed -n 's/^# Version: //p' $PROGFILE)
  local AUTHOR=$(sed -n 's/^# Author: //p' $PROGFILE)
  local LICENSE=$(sed -n 's/^# License: //p' $PROGFILE)

  echo "${PROGFILE##*/} $VERSION - $AUTHOR - $LICENSE"
}

declare OPENSSL=${ZPKI_OPENSSL:-openssl_debug}
declare BASEDIR=""
declare VERBOSE=1
declare XDEBUG=${XDEBUG:-0}
declare FORMAT=TSV
declare UTF8=1

while (( $# > 0 )); do
  case "$1" in
    ## -h, --help: Display help message
    -h|--help) usage && exit 0 ;;
    ## -V, --version: View version
    -V|--version) version && exit 0 ;;
    ## -C, --ca: Set current CA base directory
    -C|--ca) BASEDIR=$2 ; shift ;;
    ## -q, --quiet: Set verbose level to 0
    -q|--quiet) ((VERBOSE=0)) ;;
    ## -y, --yes: Validate all responses
    -y|--yes) YES=1 ;;
    ## -v, --verbose: Define verbose level (must be repeat)
    -v|--verbose) ((VERBOSE++)) ;;
    ## -c, --cipher [CIPHER]: Define cipher for key (none for no encryption)
    -c|--cipher) CIPHER=$2 ; [[ $CIPHER == none ]] && unset CIPHER ; shift ;;
    ## --force-crt: Regenerate CRT even if it exists (e.g. change in SANs)
    --force-crt) FORCE_CREATE_CRT=1 ;;
    ## --force-csr: Regenerate CSR even if it exists (e.g. change in SANs)
    --force-csr) FORCE_CREATE_CSR=1 ;;
    ## --json: Format using JSON
    --json) FORMAT=JSON ;;
    ## --no-utf8: Disable default UTF8 encoding
    --no-utf8) unset UTF8 ;;
    ## --x-debug: Enable bash debug mode
    --x-debug) XDEBUG=1 ;;
    # generic args
    --) shift ; break ;;
    -*) usage "Unknown parameter '$1'" && exit 1 ;;
    *) ARGS+=( "$1" ) ;;
  esac
  shift
done

[[ $XDEBUG == 1 ]] && set -x

[[ -z ${ARGS[@]} ]] && fatal --usage "ACTION argument required"

ACTION=${ARGS[0]}; ARGS=( "${ARGS[@]:1}" )

declare -f "$ACTION" > /dev/null || fatal "Undefined action '$ACTION'"

####################################################
## main program starts here
####################################################

## FIXME - smart detection of action wanted

[[ $ZPKI_PASSWORD ]] && export ZPKI_PASSWORD
[[ $ZPKI_CA_PASSWORD ]] && export ZPKI_CA_PASSWORD

[ -n "$ZPKI_START_DATE" ] && [ -z "$ZPKI_END_DATE" ] && \
  ZPKI_END_DATE=$(date -u -d "$(
      sed 's/^\(....\)\(..\)\(..\)\(..\)\(..\)\(..\)Z$/\1-\2-\3 \4:\5:\6 UTC/' <<< "$ZPKI_START_DATE"
  ) +$NUMDAYS days" +"%Y%m%d%H%M%SZ")

# get tty info
tty > /dev/null 2>&1 && HAS_TTY=1 || HAS_TTY=0

if [[ $BASEDIR ]]; then
  if [[ ! -d $BASEDIR ]]; then
    yesno "Create CA storage directory '$BASEDIR'" ||
      fatal "CA storage directory creation cancelled: '$BASEDIR'"
    mkdir -p $BASEDIR
  fi
  cd $BASEDIR
fi

CA_KEYFILE=ca.key
CA_CRTFILE=ca.crt
CA_CRLFILE=ca.crl
CA_CNFFILE=ca.cnf

if [[ -r ${ARGS[0]} ]]; then
  # ARGS[0] is a filename
  FILENAME=${ARGS[0]}
elif [[ ${ARGS[0]:0:1} == "/" ]]; then
  # if ARGS[0] begin with /, it is a subject
  shopt -s nocasematch
  SUBJECT="${ARGS[0]}"
  COMMON_NAME="${SUBJECT##*/CN=}"
  shopt -u nocasematch
  [[ -z $COMMON_NAME || $COMMON_NAME != ${COMMON_NAME//[/=]} ]] &&
    fatal "Empty or bad Common Name (CN)"
elif [[ ${ARGS[0]} ]]; then
  # it's a non empty common name
  COMMON_NAME=${ARGS[0]}
  SUBJECT="/CN=$COMMON_NAME"
else
  unset COMMON_NAME
fi

if [[ $COMMON_NAME ]]; then
  # only read subj altnames if CN is already read
  for ((i=1;i<${#ARGS[@]};i++)) ; do
    SUBJALT="${SUBJALT:+$SUBJALT,}${ARGS[i]}"
  done
fi

if [[ $ACTION == create-cnf ]]; then
  create-cnf ${CNFFILE:-$CA_CNFFILE}
  exit $?
elif [[ $ACTION == create-ca ]]; then
  SUBJECT=${SUBJECT:-"/CN=Certificate Authority"}
  create-ca
  exit $?
elif [[ -z $COMMON_NAME ]]; then
  $ACTION "${ARGS[@]}"
  exit $?
fi

if [[ ! -e $CA_CRTFILE ]]; then
  SUBJECT=${SUBJECT:-"/CN=Certificate Authority"} create-ca || exit $?
fi

[[ -z $FILENAME && $COMMON_NAME ]] && FILENAME=${COMMON_NAME//[^A-Za-z0-9@_.-]/_}

if [[ -e $CA_CRTFILE ]]; then
  CNFFILE=${CNFFILE:-$CA_CNFFILE}
  KEYFILE=${KEYFILE:-private/$FILENAME.key}
  CRTFILE=${CRTFILE:-certs/$FILENAME.crt}
  CSRFILE=${CSRFILE:-certs/$FILENAME.csr}
else
  KEYFILE=${KEYFILE:-$FILENAME.key}
  CNFFILE=${CNFFILE:-$FILENAME.cnf}
  CRTFILE=${CRTFILE:-$FILENAME.crt}
  CSRFILE=${CSRFILE:-$FILENAME.csr}
fi

"$ACTION"
